<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Awesomium.Windows.Controls</name>
    </assembly>
    <members>
        <member name="T:Awesomium.Windows.Controls.WebControl">
            <summary>
            Represents a WPF control that wraps an Awesomium web view.
            You can use it to embed Awesomium directly in your WPF application without any additional work.
            </summary>
            <remarks>
            You can create an instance of this class by directly invoking the
            default constructor (either by dropping it in your designer surface, through XAML or from code). 
            You do not need to explicitly create an instance of a web view through <see cref="T:Awesomium.Core.WebCore"/>.
            WebControl takes care of this internally.
            <p/>
            <note>
            Note that it is safe to use this control in a design environment for layout and configuration
            purposes. <see cref="T:Awesomium.Core.WebCore"/> and the underlying web view are only instantiated during runtime.
            </note>
            <p/>
            <h4>The Role of the <see cref="P:System.Windows.UIElement.IsEnabled"/> Property:</h4>
            In addition to its regular meaning, the <see cref="P:System.Windows.UIElement.IsEnabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently enabled.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.UIElement.IsEnabled"/>
            to <c>false</c>, will temporarily pause rendering.
            </note>
            <h4>The Role of the <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/> Property:</h4>
            A <see cref="T:Awesomium.Windows.Controls.WebControl"/> is considered invalid when it is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>).
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (see <see cref="M:Awesomium.Windows.Controls.WebControl.Close"/> and <see cref="M:Awesomium.Core.WebCore.Shutdown"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first <see cref="T:Awesomium.Windows.Controls.WebControl"/> created) or of the
            underlying web-view.
            </description>
            </item>
            </list>
            <note type="caution">
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members implemented by this <see cref="T:Awesomium.Windows.Controls.WebControl"/>. Trying to access the underlying
            web-view when it is not alive, can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of this control's members.
            </note>
            <note>
            <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/> also returns <c>false</c> when the control is shown in a designer.
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view, are only instantiated
            during runtime.
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnBeginNavigation(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.BeginNavigation"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnCreateSurface(System.Object,Awesomium.Core.CreateSurfaceEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.CreateSurface"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnSelectionChanged(System.Object,Awesomium.Core.WebSelectionEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnProcessCreated(System.Object,System.EventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ProcessCreated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnTitleChanged(System.Object,Awesomium.Core.TitleChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.TitleChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnAddressChanged(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.AddressChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnToolTipChanged(System.Object,Awesomium.Core.ToolTipChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnTargetURLChanged(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.TargetURLChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnCursorChanged(System.Object,Awesomium.Core.CursorChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.CursorChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnFocusChanged(System.Object,Awesomium.Core.FocusChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.FocusChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnShowCreatedWebView(System.Object,Awesomium.Core.ShowCreatedWebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowCreatedWebView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnDocumentReady(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.DocumentReady"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLoadingFrame(System.Object,Awesomium.Core.LoadingFrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.LoadingFrame"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLoadingFrameFailed(System.Object,Awesomium.Core.LoadingFrameFailedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.LoadingFrameFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLoadingFrameComplete(System.Object,Awesomium.Core.FrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.LoadingFrameComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnSelectLocalFiles(System.Object,Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLoginRequest(System.Object,Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.LoginRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnPrintRequest(System.Object,Awesomium.Core.PrintRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.PrintRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnPrintFailed(System.Object,Awesomium.Core.PrintOperationEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.PrintFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnPrintComplete(System.Object,Awesomium.Core.PrintCompleteEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.PrintComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnDownload(System.Object,Awesomium.Core.DownloadEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.Download"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnDownloadProgress(System.Object,Awesomium.Core.DownloadProgressEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.DownloadProgress"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnDownloadComplete(System.Object,Awesomium.Core.DownloadCompleteEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.DownloadComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnShowPopupMenu(System.Object,Awesomium.Core.PopupMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowPopupMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnShowContextMenu(System.Object,Awesomium.Core.ContextMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnResponsiveChanged(System.Object,Awesomium.Core.ResponsiveChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ResponsiveChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnCrashed(System.Object,Awesomium.Core.CrashedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.Crashed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.VerifyValid">
            <summary>
            Verifies the view is live. Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.VerifyValidParent">
            <summary>
            Verifies a windowed IWebView has specified a valid parent window.
            Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.AddSettingHandler(System.String,System.Action)">
            <summary>
            Adds an action to be performed at <see cref="M:Awesomium.Windows.Controls.WebControl.ApplyDesignTimeSettings"/>.
            </summary>
            <param name="property">The property the action is supposed to set.</param>
            <param name="handler">Delegate of the action.</param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ApplyDesignTimeSettings">
            <summary>
            Should be called by <see cref="T:Awesomium.Core.IWebView"/> components that support a designer,
            right after the underlying view has been created.
            </summary>
            <remarks>
            The <see cref="T:Awesomium.Core.WebView"/> does not need this.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InitializeStandard">
            <summary>
            Standard initialization of views.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ClearStandard">
            <summary>
            Performs standard actions when a view closes. 
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoginRespond(Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Login response helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ChooseFilesRespond(Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Select local files helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ChooseDownloadPathRespond(Awesomium.Core.DownloadEventArgs)">
            <summary>
            Select download path helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            Specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType"/> or <c>null</c> (<c>Nothing</c> in Visual Basic)
            if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <remarks>
            Several <see cref="T:Awesomium.Core.IWebView"/> features can be accessed through services. This
            is because the availability of these features depends on the current state or
            the type (see <see cref="T:Awesomium.Core.WebViewType"/>) of the <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            Here is a list of services currently available:
            <list type="table">
            <listheader>
            <term>Service Type</term>
            <description>Availability</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Core.IWebViewIMEComposition"/></term>
            <description>
            Only available when <see cref="P:Awesomium.Core.IWebView.ViewType"/> is <see cref="F:Awesomium.Core.WebViewType.Offscreen"/>.
            </description>
            </item>
            </list>
            <note>
            <h3>Awesomium.NET 1.7 Production Note:</h3>
            More <see cref="T:Awesomium.Core.IWebView"/> features that are currently either hidden
            or ignored depending on the state or the type of the <see cref="T:Awesomium.Core.IWebView"/> wrapper,
            will later be also available as services.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.Uri)">
            <summary>
            Loads a URL into the view asynchronously.
            </summary><param name="url">
            The URL to load.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoadHTML(System.String)">
            <summary>
            Loads a string of HTML into the view asynchronously.
            </summary><param name="html">
            The HTML string (ASCII) to load.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoBack">
            <summary>
            Navigates one step backwards in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary><param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Stop">
            <summary>
            Stops the current navigation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Reload(System.Boolean)">
            <summary>
            Reloads the current page.
            </summary><param name="ignoreCache">
            Indicates if cached resources should be reloaded as well.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CanGoBack">
            <summary>
            Gets if we can go back in history.
            </summary><returns>
            <c>true</c> if the view can go back in history. <c>false</c> otherwise.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CanGoForward">
            <summary>
            Gets if we can go forward in history.
            </summary><returns>
            <c>true</c> if the view can go forward in history. <c>false</c> otherwise.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GetLastError">
            <summary>
            Check if an error occurred during the last synchronous Javascript interoperation call.
            </summary><returns>
            An <see cref="T:Awesomium.Core.Error"/> value indicating the error that may have occurred
            during the last synchronous Javascript interoperation API call.
            </returns><seealso cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/><seealso cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CreateGlobalJavascriptObject(System.String)">
            <summary>
            Create a global JavaScript object that will persist between all loaded pages, 
            for the lifetime of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><param name="name">
            The name of the object as it will appear in JavaScript.
            </param><returns>
            If this call succeeds, the returned <see cref="T:Awesomium.Core.JSValue"/> will be of type 'Object' 
            (see <see cref="P:Awesomium.Core.JSValue.IsObject"/>). You can check the reason why the call failed by calling
            <see cref="M:Awesomium.Core.IWebView.GetLastError"/> after this method.
            </returns><remarks>
            Global Objects can only contain the following JavaScript types as 
            properties:
            <list type="bullet">
            <item>
            <description>
            <c>Number</c>
            </description>
            </item>
            <item>
            <description>
            <c>String</c>
            </description>
            </item>
            <item>
            <description>
            <c>Array</c>
            </description>
            </item>
            <item>
            <description>
            <c>Null</c>
            </description>
            </item>
            <item>
            <description>
            <c>Other Global Objects</c>
            </description>
            </item>
            <item>
            <description>
            <c>Undefined</c>
            </description>
            </item>
            </list>
            <p/>
            Global Objects will retain any custom methods that are registered
            (see <see cref="M:Awesomium.Core.JSObject.SetCustomMethod(System.String,System.Boolean)"/>).
            <note>
            To create a child global-object, you should specify the full name with dot-notation for example:
            <c>parentObject.childObject</c>.
            <p/>
            The parent object should exist before attempting to make any children.
            </note>
            <note type="caution">
            You can only create objects on pages with an active DOM. (You should
            wait until the first <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event or the <see cref="E:Awesomium.Core.IWebView.ProcessCreated"/> event,
            before creating your objects).
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascript(System.String)">
            <summary>
            Executes some JavaScript asynchronously in the main frame of the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes some JavaScript asynchronously on the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXpath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascriptWithResult(System.String)">
            <summary>
            Executes some JavaScript synchronously in the main frame of the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascriptWithResult(System.String,System.String)">
            <summary>
            Executes some JavaScript synchronously on the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXPath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Undo">
            <summary>
            Undo the last 'edit' operation. (Similar to CTRL+Z).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Redo">
            <summary>
            Redo the last 'edit' operation. (Similar to CTRL+Y).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Cut">
            <summary>
            Performs a 'cut' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Copy">
            <summary>
            Performs a 'copy' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this view, to the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CopyImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to copy an image on the page, to the system clipboard.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary><param name="x">The x-coordinate.</param><param name="y">The y-coordinate.</param><remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Paste">
            <summary>
            Performs a 'paste' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.PasteAndMatchStyle">
            <summary>
            Performs a 'paste' operation using the system clipboard while attempting
            to preserve any styles of the original text.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SelectAll">
            <summary>
            Performs a 'select all' operation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.PrintToFile(System.String,Awesomium.Core.PrintConfig)">
            <summary>
            Prints this <see cref="T:Awesomium.Core.IWebView"/> instance to a PDF file, asynchronously.
            You should generally use this method in response to a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            event.
            </summary><param name="outputDirectory">
            A writeable directory to write the file(s) to.
            </param><param name="config">
            The configuration settings to use.
            </param><returns>
            Returns a unique request ID that you can use later to identify
            this specific request (see <see cref="E:Awesomium.Core.IWebView.PrintFailed"/> and <see cref="E:Awesomium.Core.IWebView.PrintComplete"/>). 
            May return <c>0</c> if this method fails prematurely.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="T:Awesomium.Core.PrintConfig"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.#ctor">
            <summary>
            Creates and initializes an instance of <see cref="T:Awesomium.Windows.Controls.WebControl"/> and its underlying web view.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Close">
            <summary>
            Destroys and removes this web view control. Any call to members of this control
            after calling this method, will cause a <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <remarks>
            To avoid exceptions, do not call this method when the hosting UI of the control (if any)
            is still alive and visible.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Dispose">
            <summary>
            Destroys and removes this web view control. Any call to members of this control
            after calling this method, will cause a <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <remarks>
            To avoid exceptions, do not call this method when the hosting UI of the control (if any)
            is still alive and visible.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Maintains the relationship between the control's enabled status and internal
            asynchronous rendering (see <see cref="P:Awesomium.Core.IWebView.IsRendering"/>).
            </summary>
            <remarks>
            In addition to its regular meaning, the <see cref="P:System.Windows.UIElement.IsEnabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently active.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.UIElement.IsEnabled"/>
            to <c>false</c>, will temporarily pause rendering.
            </note>
            <note type="inherit">
            Inheritors can override <see cref="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>, 
            then set <see cref="P:Awesomium.Core.IWebView.IsRendering"/> manually if they want to <i>disconnect</i> internal asynchronous 
            rendering, from the control's enabled status.
            </note>
            <note>
            Note that this method is provided by the WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/> so that
            you can control the relationship between the control's enabled status
            and internal asynchronous rendering (see <see cref="P:Awesomium.Core.IWebView.IsRendering"/>). It does
            not trigger the <see cref="E:System.Windows.UIElement.IsEnabledChanged"/> event.
            The <see cref="E:System.Windows.UIElement.IsEnabledChanged"/> event is fired by the
            .NET Framework <b>before</b> this method is called.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.FocusView">
            <summary>
            Notifies the current page that it has gained focus.
            </summary>
            <remarks>
            You will need to call this to gain text-box focus, among other things. 
            (If you fail to ever see a blinking caret when typing text, this is why.)
            </remarks>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.UnfocusView">
            <summary>
            Notifies the current page that it has lost focus.
            </summary>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-move event in local coordinates.
            </summary>
            <param name="x">
            The absolute x-coordinate of the mouse (relative to the <see cref="T:Awesomium.Windows.Controls.WebControl"/> itself).
            </param>
            <param name="y">
            The absolute y-coordinate of the mouse (relative to the <see cref="T:Awesomium.Windows.Controls.WebControl"/> itself).
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseDown(Awesomium.Core.MouseButton)">
            <summary>
            Injects a mouse-down event.
            </summary>
            <param name="button">
            The mouse button that was pressed.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseUp(Awesomium.Core.MouseButton)">
            <summary>
            Injects a mouse-up event.
            </summary>
            <param name="button">
            The mouse button that was released.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-wheel event.
            </summary>
            <param name="scrollVert">
            The relative amount of pixels to scroll vertically.
            </param>
            <param name="scrollHorz">
            The relative amount of pixels to scroll horizontally.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Injects a keyboard event.
            </summary>
            <param name="keyEvent">
            The keyboard event to inject. You'll need to initialize the members of the passed
            <see cref="T:Awesomium.Core.WebKeyboardEvent"/>, yourself.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.NativeWindowProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.NativeWindow"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ParentWindowProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ParentWindow"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsLiveProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsProcessCreatedProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsProcessCreated"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.TitleProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Title"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasTitleProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasTitle"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsLoadingProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsLoading"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsNavigatingProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsNavigating"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsCrashedProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsDocumentReadyProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsDocumentReady"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsResponsiveProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsResponsive"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.TargetURLProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.TargetURL"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasTargetURLProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasTargetURL"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.SelectionProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Selection"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasSelectionProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasSelection"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.FocusedElementTypeProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.FocusedElementType"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ToolTipTextProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ToolTipText"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ParentViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ParentView"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.LatestContextDataProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.LatestContextData"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsRenderingProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.TerminationStatusProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.TerminationStatus"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ProcessIDProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessID"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ProcessHandleProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessHandle"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.NativeViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.WebSessionProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.WebSession"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.SurfaceProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Surface"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsTransparentProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsTransparent"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.SourceProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Source"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.NavigationInfoProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.NavigationInfo"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ProcessInputProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ViewTypeProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> dependency property.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.BeginNavigation">
            <summary>
            Occurs when a view begins navigating to a new URL.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.CreateSurface">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.ISurface"/> is requested by the view. Usually, 
            every time the size of the view changes. You should return your own 
            <see cref="T:Awesomium.Core.ISurface"/> implementation here.
            </summary><remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.SelectionChanged">
            <summary>
            Occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ProcessCreated">
            <summary>
            Occurs when the child rendering process for this view, has been spawned.
            </summary><remarks>
            This event also indicates the moment when global Javascript objects can be created.
            (See: <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>)
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.TitleChanged">
            <summary>
            Occurs when the current page title has changed.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.AddressChanged">
            <summary>
            Occurs when the page URL has changed.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Source"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ToolTipChanged">
            <summary>
            Occurs when the tooltip text has changed. You
            should hide the tooltip when the text is empty.
            </summary><remarks>
            Technology specific <c>WebControls</c>, present their own tooltip.
            Set <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>,
            to prevent a <c>WebControl</c> from displaying its predefined tooltip.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.TargetURLChanged">
            <summary>
            Occurs when the target URL has changed. This
            is usually the result of hovering over a link on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.CursorChanged">
            <summary>
            Occurs when the cursor has changed. This is
            is usually the result of hovering over different content.
            </summary><remarks>
            You can set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to prevent a technology specific <c>WebControl</c>
            from changing the visible cursor.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.FocusChanged">
            <summary>
            Occurs when the focused element changes on the page.
            This is usually the result of text-box being focused or some other
            user-interaction event.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ShowCreatedWebView">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.IWebView"/> creates a new child web-view instance
            (usually the result of <c>window.open</c> or an external link). It
            is your responsibility to display this child web-view in your
            application.
            </summary><remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance
            creates a new child view (usually the result of <c>window.open</c> or an external link). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <see cref="T:Awesomium.Core.WebView"/> provides a constructor that accepts a previously created web-view instance.
            (see <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>). Similarly, technology
            specific <c>WebControls</c> provide a <c>NativeView</c> property that allows you to
            assign to the controls, a previously created web-view instance 
            (eg, <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>). This property should be
            set before the control loads and creates its own underlying web-view. Usually immediately 
            after instantiating the control or in the designer.
            <note type="caution">
            If you do not intend to wrap the new view, you should set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to tell the core to destroy the unused web-view instance. If you fail
            to do this, the native web-view instance will remain alive until the <see cref="T:Awesomium.Core.WebCore"/>
            is shut down. This can result in many processes (<i>awesomium_process</i>) being spawned,
            but never used.
            <p/>
            The <see cref="T:Awesomium.Core.WebCore"/> provides a <see cref="M:Awesomium.Core.WebCore.DestroyUnwrappedViews"/> method.
            This can be useful for destroying such native views that were spawned by Awesomium,
            but were never wrapped.
            </note>
            <note>
            If you are wrapping the child view using a <see cref="T:Awesomium.Core.WebView"/> instance, you should call 
            <see cref="M:Awesomium.Core.IWebView.Resize(System.Int32,System.Int32)"/> on the child view immediately after the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event, 
            to make it match your container.
            </note>
            </remarks><seealso cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.DocumentReady">
            <summary>
            Occurs when the DOM has finished parsing and the
            <c>window</c> object is available for JavaScript execution.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.LoadingFrame">
            <summary>
            Occurs when the page begins loading a frame.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.LoadingFrameFailed">
            <summary>
            Occurs when a frame fails to load. See <see cref="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription"/>
            for additional information.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.LoadingFrameComplete">
            <summary>
            Occurs when the page finishes loading a frame.
            </summary><remarks>
            The main frame always finishes loading last for a given page load.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.SelectLocalFiles">
            <summary>
            Occurs when the page requests to display a file chooser
            dialog. This is usually the result of a user clicking on an HTML
            input element with <c>type='file'</c>.
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and <see cref="E:Awesomium.Core.IWebView.Download"/> events either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and
            <see cref="E:Awesomium.Core.IWebView.Download"/> events:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using either:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> for <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/> or <see cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/> 
            for <see cref="E:Awesomium.Core.IWebView.Download"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this member.
            </note>
            <note type="caution">
            For <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>, if you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.LoginRequest">
            <summary>
            Occurs when the page needs authentication from the user (for
            example, Basic HTTP Auth, NTLM Auth, etc.).
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/><seealso cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.PrintRequest">
            <summary>
            Occurs when the page requests to print itself. (Usually
            the result of <c>window.print()</c> being called from JavaScript.) It is
            your responsibility to print the view to a file and handle the
            actual device printing.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.PrintFailed">
            <summary>
            Occurs when <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> fails. Typically because of
            bad printer configuration or invalid output path (see <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>).
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.PrintComplete">
            <summary>
            Occurs when a <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> operation, completes successfully.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.Download">
            <summary>
            Occurs when the page requests to begin downloading a certain file.
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and <see cref="E:Awesomium.Core.IWebView.Download"/> events either
            modally or non-modally. Only modal handling is officially supported by Awesomium.NET.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> and
            <see cref="E:Awesomium.Core.IWebView.Download"/> events:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using either:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> for <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/> or <see cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/> 
            for <see cref="E:Awesomium.Core.IWebView.Download"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this member.
            </note>
            <note type="caution">
            For <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>, if you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidChooseDownloadPath(System.Int32,System.String)"/><seealso cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.DownloadProgress">
            <summary>
            Occurs when the progress of a download is updated.
            </summary><seealso cref="M:Awesomium.Core.IWebView.CancelDownload(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.DownloadComplete">
            <summary>
            Occurs when a download is finished.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ShowPopupMenu">
            <summary>
            Occurs when the page requests to display a drop-down
            (popup) menu. This is usually the result of a user clicking on
            a <c>select</c> HTML input element.
            </summary><remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu">
            <summary>
            Occurs when the page requests to display a context menu. 
            This is usually the result of a user right-clicking on
            an element or plugin in the page.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ResponsiveChanged">
            <summary>
            Occurs when this view's process hangs, or becomes responsive after
            a hang. Use <see cref="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive"/> or
            <see cref="P:Awesomium.Core.IWebView.IsResponsive"/> to check the current state of the process.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.Crashed">
            <summary>
            Occurs when this view's process crashes.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.CanRecreateView">
            <summary>
            Gets if this control wraps a previously crashed
            view that can be recreated.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Layers">
            <summary>
            Gets a list of UI layers currently visible.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.NativeWindow">
            <summary>
            Gets the actual window handle that was created by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This is only valid for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ParentWindow">
            <summary>
            Gets or sets the parent window for this <see cref="T:Awesomium.Core.IWebView"/> instance. This is only valid
            for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>),
            on the Windows platform.
            </summary><remarks>
            <note type="caution">
            When you use a <see cref="T:Awesomium.Core.WebView"/>, you should call this method immediately after calling 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>. The window for this <see cref="T:Awesomium.Core.IWebView"/> instance
            will not be created until you set <see cref="P:Awesomium.Core.IWebView.ParentWindow"/>, on the Windows platform.
            </note>
            <note>
            Technology specific <c>WebControls</c>, take care of this internally. Once set and the underlying
            window for this <see cref="T:Awesomium.Core.IWebView"/> instance has been created, this property cannot be changed.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuResourceKey">
            <summary>
            Gets the resource key for the context menu of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            This can be used to override the default context menu.
            </remarks>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuPageItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a 
            page that has no selection and no keyboard focus.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a 
            page that has no selection and no keyboard focus.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuPageItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="BrowseBack" />
                <MenuItem Command="BrowseForward" />        
                <MenuItem Command="Refresh" />
                <Separator />
                <MenuItem Command="Print" />
                <Separator />
                <MenuItem Command="SelectAll" />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuInputItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when the control has keyboard focus.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when the control has keyboard focus.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuInputItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="Copy" />
                <MenuItem Command="Cut" />        
                <MenuItem Command="Paste" />
                <Separator />
                <MenuItem Command="SelectAll" />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuSelectionItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when a range of content in the page 
            is currently selected.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when a range of content in the page 
            is currently selected.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuSelectionItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="Copy" />
                <MenuItem Command="{x:Static awe:WebControlCommands.CopyHTML}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuImageItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on an image in a page.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on an image in a page.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuImageItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="{x:Static awe:WebControlCommands.CopyImage}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuLinkItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a link in a page.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a link in a page.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuLinkItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="{x:Static awe:WebControlCommands.CopyLinkAddress}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ToolTipResourceKey">
            <summary>
            Gets the resource key for the tool-tip of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            This can be used to override the default tool-tip.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsLive">
            <summary>
            Gets if the native web-view, is alive.
            </summary><returns>
            A <see cref="T:System.Boolean"/> value indicating if the native web-view, 
            is alive. <c>False</c> indicates that the native web-view is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            <note>
            When crashed, technology specific <c>WebControls</c> will attempt 
            to recreate the underlying view.
            For details, see: <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (eg, using <see cref="M:Awesomium.Windows.Controls.WebControl.Close"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first view created) or of the
            native web-view.
            </description>
            </item>
            </list>
            </returns><remarks>
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members. Trying to access the native web-view when it is not alive, 
            can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of view members.
            <p/>
            <note>
            This property also returns <c>false</c> when the technology specific <c>WebControls</c>
            are shown in a designer. The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the native web-view, 
            are only instantiated during runtime.
            </note>
            </remarks><example>
            <code>
            private void toolStripButton2_Click( object sender, EventArgs e )
            {
                if ( !webControl.IsLive )
                    return;
                    
                webControl.GoForward();
            }
            </code>
            <code lang="VB">
            Private Sub ToolStripButton2_Click( sender As Object, e As EventArgs ) Handles ToolStripButton2.Click
                If Not m_WebControl.IsLive Then Return
                    
                m_WebControl.GoForward()
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsProcessCreated">
            <summary>
            Gets if the child rendering process for this view, has been spawned.
            </summary>
            <seealso cref="E:Awesomium.Windows.Controls.WebControl.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Title">
            <summary>
            Gets the title of the page currently loaded.
            </summary>
            <remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Windows.Controls.WebControl.NavigationInfo"/>.
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.NavigationInfo"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.Title"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsLoading">
            <summary>
            Gets if any page resources are loading.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsNavigating">
            <summary>
            Gets if the web-view is currently navigating to a Url.
            </summary>
            <remarks>
            Unlike <see cref="P:Awesomium.Windows.Controls.WebControl.IsLoading"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsCrashed">
            <summary>
            Gets if the web-view process has been crashed.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsDocumentReady">
            <summary>
            Gets if DOM (Document Object Model) for the page being loaded, is ready.
            </summary>
            <remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsResponsive">
            <summary>
            Gets if the web-view process is currently responsive.
            </summary>
            <seealso cref="E:Awesomium.Windows.Controls.WebControl.ResponsiveChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.TargetURL">
            <summary>
            Gets the target URL indicated by the web-view,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasTargetURL">
            <summary>
            Gets if the web-view is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Selection">
            <summary>
            Gets a <see cref="T:Awesomium.Core.Selection"/> providing information about the current selection range.
            </summary><seealso cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.FocusedElementType">
            <summary>
            Get the type of the currently-focused element. This is useful for determining if
            the view should capture keyboard events. If no element is focused, this will
            return <see cref="F:Awesomium.Core.FocusedElementType.None"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ToolTipText">
            <summary>
            Gets the target tool-tip text indicated by the web-view,
            usually as a result of hovering over elements in the page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ParentView">
            <summary>
            Gets the termination status of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This is <see cref="F:Awesomium.Core.TerminationStatus.None"/> if the web-view
            has not been instantiated yet (this can be the case in a technology specific
            <c>WebControl</c>) and <see cref="F:Awesomium.Core.TerminationStatus.StillRunning"/>
            if the web-view process has not been terminated and is still running.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.LatestContextData">
            <summary>
            Gets the latest web view context data updated by a right-click in a web-page.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that represents the latest web view context data.
            </returns>
            <seealso cref="T:Awesomium.Core.WebContextMenuInfo"/>
            <seealso cref="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsRendering">
            <summary>
            Gets if internal asynchronous rendering is currently enabled.
            </summary>
            <remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally.
            <note>
            This property is automatically updated by monitoring the control's
            enabled status and it should not be manually set.
            The update occurs in <see cref="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </note>
            <note type="inherit">
            Inheritors can override <see cref="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>,
            then set <see cref="P:Awesomium.Core.IWebView.IsRendering"/> manually if they want to <i>disconnect</i> internal asynchronous 
            rendering, from the control's enabled status.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.TerminationStatus">
            <summary>
            Gets the termination status of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This is <see cref="F:Awesomium.Core.TerminationStatus.None"/> if the web-view
            has not been instantiated yet (this can be the case in a technology specific
            <c>WebControl</c>) and <see cref="F:Awesomium.Core.TerminationStatus.StillRunning"/>
            if the web-view process has not been terminated and is still running.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ProcessID">
            <summary>
            Get the unique ID for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no process active.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ProcessHandle">
            <summary>
            Get the handle for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This may not be initialized until some time after the
            view is actually created (when we receive the first IPC message
            from the child-process).
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.NativeView">
            <summary>
            Gets or sets the handle to the underlying web-view instance.
            </summary>
            <remarks>
            You can use this property to create a wrapper for a web-view that has been internally created by Awesomium.
            Views are created internally by Awesomium for external links that should be opened in a new view, or popup windows
            (See Javascript: <c>window.open</c>).
            <note type="caution">
            Once assigned and the control goes live, this property cannot be changed. Attempting to do so,
            will fail silently.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Attempted to wrap a web-view instance that has already been wrapped.
            </exception>
            <seealso cref="E:Awesomium.Windows.Controls.WebControl.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.WebSession">
            <summary>
            Gets the session associated with this view.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Surface">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.ISurface"/> used to render the
            pixel buffer of this view.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsTransparent">
            <summary>
            Gets or sets if pages should be rendered with transparency
            preserved (for ex, for pages with style="background-color: transparent;")
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Source">
            <summary>
            Gets or sets the current URL presented by this <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <returns>
            An absolute <see cref="T:System.Uri"/> representing the current URL presented 
            by this <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </returns>
            <seealso cref="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.Uri)"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Windows.Controls.WebControl.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns>
            <remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Windows.Controls.WebControl.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><c>Title</c> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><c>Title</c> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <c>Title</c> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ProcessInput">
            <summary>
            Gets or sets the user input that this control's surface should process.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ViewType">
            <summary>
            Gets or sets the type of the underlying web-view, this control wraps.
            </summary>
            <remarks>
            The default value for the WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/> is <see cref="F:Awesomium.Core.WebViewType.Offscreen"/>.
            This value defines the presenter that will be used for presenting the underlying
            web-view. For details, read the documentation of <see cref="T:Awesomium.Windows.Controls.IWebViewPresenter"/>.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlDialogLayer">
            <summary>
            Represents a dialog layer displayed over a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            Dialog layers are reusable. They should be created only once
            in the lifetime of the <see cref="T:Awesomium.Windows.Controls.WebControl"/> they will be used with.
            You should later use the <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)"/> and <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close"/>
            methods to show or hide the layer when needed.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlLayer">
            <summary>
            Base class of all control layers associated to a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            You cannot directly derive from this class. You should instead subclass
            a pre-defined derived class such as <see cref="T:Awesomium.Windows.Controls.WebControlDialogLayer"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.#ctor(Awesomium.Windows.Controls.WebControl)">
            <summary>
            Creates an instance of <see cref="T:Awesomium.Windows.Controls.WebControlDialogLayer"/>.
            </summary>
            <param name="parent">
            Indicated the parent <see cref="T:Awesomium.Windows.Controls.WebControl"/> the layer belongs too.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.OnContentChanged(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlLayer.ParentControl">
            <summary>
            Gets the parent <see cref="T:Awesomium.Windows.Controls.WebControl"/> the layer belongs to.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlLayer.IsContentVisual">
            <summary>
            Gets if the specified <see cref="P:System.Windows.Controls.ContentControl.Content"/> should be treated as visual content,
            or as a data provider only. The default is <c>false</c> which means that the
            content will be treated as a data provider, visualized using the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate"/>.
            </summary>
            <remarks>
            Regularly, the use of DataTemplates is preferred when visualizing data, compared to direct
            visual Content. DataTemplates allow flexible use of Triggers etc.. In such scenarios, 
            the WebControl or the layers themselves are used as Content (so that the DataTemplate
            can access them as data providers). Without this property, WPF would attempt to remove the
            visual Content from the visual tree and add it as a child of this ContentControl.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.#ctor(Awesomium.Windows.Controls.WebControl)">
            <summary>
            Creates an instance of <see cref="T:Awesomium.Windows.Controls.WebControlDialogLayer"/>.
            </summary>
            <param name="parent">
            Indicated the parent <see cref="T:Awesomium.Windows.Controls.WebControl"/> the layer belongs too
            (see Remarks section).
            </param>
            <remarks>
            Dialog layers are reusable. They should be created only once
            in the lifetime of the <see cref="T:Awesomium.Windows.Controls.WebControl"/> they will be used with.
            You should later use the <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)"/> and <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close"/>
            methods to show or hide the layer when needed.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)">
            <summary>
            Shows the dialog layer.
            </summary>
            <param name="data">
            The <see cref="T:System.ComponentModel.CancelEventArgs"/> of the event that triggers
            the activation of the dialog. All dialog events in <see cref="T:Awesomium.Core.IWebView"/>,
            inherit <see cref="T:System.ComponentModel.CancelEventArgs"/>.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close">
            <summary>
            Hides the dialog layer.
            </summary>
            <remarks>
            This method should be called by a derived control,
            usually in response to <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnResponse(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)"/>.
            After hiding, the layer will be automatically removed
            from the <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </remarks>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.MessageProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.Message"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.ImageSourceProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageSource"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.HasOKButtonProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasOKButton"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.HasCancelButtonProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasCancelButton"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.IsActiveProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.IsActive"/> dependency property.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnResponse(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executed when either the OK or the Cancel button is clicked.
            </summary>
            <param name="sender">
            The command target (dialog button) that is invoking the handler.
            </param>
            <param name="e">
            Event data.
            <p/>
            <note>
            The <see cref="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter"/> is a boolean value
            indicating if the <b>OK</b> or the <b>Cancel</b> button has been clicked.
            </note>
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnCanRespond(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Occurs when the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.Respond"/> command initiates a check to determine
            whether the command can be executed on a dialog button.
            </summary>
            <param name="sender">
            The command target (dialog button) that is invoking the handler.
            </param>
            <param name="e">
            Event data.
            </param>
            <remarks>
            The default setting for the <see cref="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute"/> property
            of the <paramref name="e"/> argument, is <c>true</c> for the <b>Cancel</b> button
            and <c>false</c> for the <b>OK</b> button.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.Data">
            <summary>
            Gets the dialog's data provided to the <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)"/>
            method, or <c>null</c> (<c>Nothing</c> in Visual Basic)
            if the dialog is not active.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.Respond">
            <summary>
            Routed command assigned to the dialog's buttons.
            </summary>
            <remarks>
            <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter"/> is set to either
            <c>true</c> or <c>false</c> to indicate OK or Cancel respectively.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.Message">
            <summary>
            Gets or sets the main message displayed by the dialog.
            </summary>
            <remarks>
            All dialogs launched by a <see cref="T:Awesomium.Windows.Controls.WebControl"/>,
            should contain a main message for the user.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageSource">
            <summary>
            Gets or sets the image displayed in the dialog.
            </summary>
            <remarks>
            The fixed width of the column hosting the Image, 
            can be defined in the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageColumnWidth"/>
            property.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageColumnWidth">
            <summary>
            Gets the fixed width of the dialogs left column,
            which hosts the dialogs image. The default is 80px.
            </summary>
            <remarks>
            This property can be very useful for adjusting
            the width of your columns. If you use a grid in
            your custom content, bind the width of your left 
            <see cref="T:System.Windows.Controls.ColumnDefinition"/> to this property.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasOKButton">
            <summary>
            Gets if an OK button is displayed in the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasCancelButton">
            <summary>
            Gets if a Cancel button is displayed in the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.IsActive">
            <summary>
            Gets if the layer is currently active and visible.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlLoginLayer">
            <summary>
            Represents a layer added to a <see cref="T:Awesomium.Windows.Controls.WebControl"/> to display an authentication request.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.IWebViewPresenter">
            <summary>
            This interface defines the members that a WPF <see cref="T:Awesomium.Core.IWebView"/>
            presentation control should implement.
            </summary>
            <remarks>
            <see cref="T:Awesomium.Core.IWebView"/> presentation controls are used in the visual tree
            when styling a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>. These can be custom WPF surfaces
            implementing <see cref="T:Awesomium.Core.ISurface"/> (for offscreen views) or any other
            control providing custom presentation of a <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            When the custom control is added to the visual tree and loaded for presentation, 
            the WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/> uses the <see cref="T:Awesomium.Windows.Controls.IWebViewPresenter"/> interface
            to communicate with the presentation control.
            <p/>
            <c>Awesomium.Windows.Controls</c> already provides 2 such presenters:
            <list type="table">
            <listheader>
            <term>Presentation Control</term>
            <description>Usage (by the default style)</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/></term>
            <description>
            Used when <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to <see cref="F:Awesomium.Core.WebViewType.Offscreen"/> (default).
            This is an <see cref="T:Awesomium.Core.ISurface"/> component that uses 100% WPF logic to copy
            the view's pixel buffer to a bitmap that it then renders for presentation.
            </description>
            </item>
            <item>
            <term><see cref="T:Awesomium.Windows.Controls.WebViewHost"/></term>
            <description>
            This is an <see cref="T:System.Windows.Interop.HwndHost"/> that is used when <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> 
            is set to <see cref="F:Awesomium.Core.WebViewType.Window"/>. For more details, read the documentation 
            of <see cref="T:Awesomium.Windows.Controls.WebViewHost"/>.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.IWebViewPresenter.ShowToolTip(System.String)">
            <summary>
            Called by the <see cref="T:Awesomium.Windows.Controls.WebControl"/> when the view asks
            for a tool-tip to be presented.
            </summary>
            <param name="toolTipText">
            The content of the tool-tip.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.IWebViewPresenter.HideToolTip">
            <summary>
            Called by the <see cref="T:Awesomium.Windows.Controls.WebControl"/> when any tool-tips
            visible, should be hidden.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.IWebViewPresenter.ShowWebContextMenu(Awesomium.Core.WebContextMenuInfo)">
            <summary>
            Called by the <see cref="T:Awesomium.Windows.Controls.WebControl"/> when the view asks
            for a context menu to be presented.
            </summary>
            <param name="info">
            Provides context menu information.
            </param>
        </member>
        <member name="P:Awesomium.Windows.Controls.IWebViewPresenter.Cursor">
            <summary>
            Gets or sets the current visible cursor.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.IWebViewPresenter.View">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.IWebView"/> instance this control
            is presenting.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlContextMenu">
            <summary>
            Predefined stylable context menu used by <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            There are multiple ways to customize, override or block the context menu of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            These are described in the following list:
            <list type="table">
            <listheader>
            <term>Action</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>Redefine a <see cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/> application resource, 
            using the <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuResourceKey"/> as key.</term>
            <description>
            Completely substitutes the default context menu. You should bind the <see cref="P:System.Windows.FrameworkElement.DataContext"/> property
            to the <see cref="P:System.Windows.Controls.ContextMenu.PlacementTarget"/> property, to access the <see cref="T:Awesomium.Windows.Controls.WebControl"/>. You can later use the
            <see cref="T:Awesomium.Core.WebContextMenuInfo"/> provided through <see cref="P:Awesomium.Windows.Controls.WebControl.LatestContextData"/> to update the state of the menu's items.
            </description>
            </item>
            <item>
            <term>Assign your own context menu to the <see cref="P:System.Windows.FrameworkElement.ContextMenu"/> property.</term>
            <description>Same as before but in this case you should provide your own display context data.</description>
            </item>
            <item>
            <term>Redefine one or more arrays of menu items in your application resources, 
            using the following keys (depending to the group you wish to substitute or change):
            <p/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuPageItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuInputItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuSelectionItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuImageItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuLinkItemsArrayRecourceKey"/>
            </term>
            <description>Substitutes or edits specific menu items' groups, that are visible according to the current context.
            For more details, read the documentation of the resource keys.</description>
            </item>
            <item>
            <term>Handle the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu"/> event and set the <see cref="P:Awesomium.Core.ContextMenuEventArgs.Handled"/> property
            to <c>true</c>.</term>
            <description>This will block the default context menu from displaying. You can then manually display your own context menu.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlContextMenu.ContextMenuInfo">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.WebContextMenuInfo"/> instance used to provide data to the context menu.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebViewHost">
            <summary>
            Represents a WPF host of a windowed <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            This control wraps and presents a native, windowed 
            <see cref="T:Awesomium.Core.IWebView"/> instance. It allows taking advantage of
            full hardware acceleration when <see cref="P:Awesomium.Core.WebPreferences.EnableGPUAcceleration"/>
            is set to <c>true</c>, but poses certain presentation limitations compared to
            other WPF components.
            <p/>
            <see cref="T:Awesomium.Windows.Controls.WebViewHost"/> is used by <see cref="T:Awesomium.Windows.Controls.WebControl"/> instances,
            when <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to <see cref="F:Awesomium.Core.WebViewType.Window"/>.
            For more details, see: <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/>.
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/>
            <seealso cref="P:Awesomium.Core.WebPreferences.EnableGPUAcceleration"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.ShowToolTip(System.String)">
            <inheritdoc cref="M:Awesomium.Windows.Controls.IWebViewPresenter.ShowToolTip(System.String)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.HideToolTip">
            <inheritdoc cref="M:Awesomium.Windows.Controls.IWebViewPresenter.HideToolTip"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.ShowWebContextMenu(Awesomium.Core.WebContextMenuInfo)">
            <inheritdoc cref="M:Awesomium.Windows.Controls.IWebViewPresenter.ShowWebContextMenu(Awesomium.Core.WebContextMenuInfo)"/>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebViewHost.ViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebViewHost.View"/> dependency property.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebViewHost.View">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.IWebView"/> instance this control
            hosts.
            </summary>
            <remarks>
            <note type="caution">
            You can only assign a windowed <see cref="T:Awesomium.Core.IWebView"/> instance
            (<see cref="P:Awesomium.Core.IWebView.ViewType"/> <c>==</c> <see cref="F:Awesomium.Core.WebViewType.Window"/>)
            to <see cref="T:Awesomium.Windows.Controls.WebViewHost"/>.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Attempted to assign an offscreen <see cref="T:Awesomium.Core.IWebView"/> instance.
            </exception>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebViewPresenter">
            <summary>
            Represents a WPF <see cref="T:Awesomium.Core.ISurface"/> that can be used with WPF visual elements
            to render the pixel buffer of an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnInitialized(System.Object,Awesomium.Core.SurfaceInitializedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebViewPresenter.Initialized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnUpdated(System.Object,Awesomium.Core.SurfaceUpdatedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebViewPresenter.Updated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting resources.
            </summary>
            <remarks>
            <note>
            When added to the visual tree of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>, <see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/>
            is being disposed by the parent <see cref="T:Awesomium.Windows.Controls.WebControl"/> is being disposed.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnStylusMove(System.Windows.Input.StylusEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnTouchMove(System.Windows.Input.TouchEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnTouchDown(System.Windows.Input.TouchEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnTouchUp(System.Windows.Input.TouchEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnLostFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.HandleInput(Awesomium.Core.ViewInput)">
            <summary>
            Gets if the specified kind of input should be handled by the control.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.ShowToolTip(System.String)">
            <inheritdoc cref="M:Awesomium.Windows.Controls.IWebViewPresenter.ShowToolTip(System.String)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.HideToolTip">
            <inheritdoc cref="M:Awesomium.Windows.Controls.IWebViewPresenter.HideToolTip"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.ShowWebContextMenu(Awesomium.Core.WebContextMenuInfo)">
            <inheritdoc cref="M:Awesomium.Windows.Controls.IWebViewPresenter.ShowWebContextMenu(Awesomium.Core.WebContextMenuInfo)"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebViewPresenter.Initialized">
            <summary>
            Occurs when this surface is being initialized for use with a <see cref="T:Awesomium.Core.IWebView"/>.
            </summary>
            <remarks>
            This event can be called more than once if you are reusing this surface
            for multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <note>
            Once assigned to a View and initialized, a surface can only be used
            with that single View.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebViewPresenter.Updated">
            <summary>
            Occurs when the surface has been updated.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebViewPresenter.View">
            <inheritdoc cref="P:Awesomium.Windows.Controls.IWebViewPresenter.View"/>
        </member>
        <member name="T:Awesomium.Windows.Data.ResourceDataSourceProvider">
            <summary>
            Represents a <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> that provides
            a <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> instance.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>
        </member>
        <member name="T:Awesomium.Windows.Data.DataSourceProvider">
            <summary>
            Represents the base class for WPF <see cref="T:Awesomium.Core.Data.DataSource"/> providers.
            </summary>
            <remarks>
            The <c>key</c> (or <c>x:Key</c> in XAML) defined when adding
            this <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> to <see cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>,
            indicates the asset domain the <see cref="T:Awesomium.Core.Data.DataSource"/> provided by this
            <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/>, will be bound to.
            <p/>
            This class inherits <see cref="T:System.Windows.DependencyObject"/>. You should in general
            specify properties, depending on the type of <see cref="T:Awesomium.Core.Data.DataSource"/> 
            this <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> provides, as <see cref="T:System.Windows.DependencyProperty"/>, 
            that can be edited in XAML designer.
            <note>
            <see cref="N:Awesomium.Windows.Data"/> includes providers for all the <b>Awesomium.NET</b>
            <see cref="T:Awesomium.Core.Data.DataSource"/> types, available through <see cref="N:Awesomium.Core.Data"/>.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>
        </member>
        <member name="M:Awesomium.Windows.Data.DataSourceProvider.GetDataSource">
            <summary>
            Called by the <see cref="T:Awesomium.Windows.Controls.WebSessionProvider"/>, when a
            <see cref="T:Awesomium.Core.Data.DataSource"/> must be provided by this <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/>.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.Data.DataSource"/> instance that will be added to the
            <see cref="T:Awesomium.Core.WebSession"/> provided by a <see cref="T:Awesomium.Windows.Controls.WebSessionProvider"/>.
            <p/>
            The <c>key</c> (or <c>x:Key</c> in XAML) defined when adding
            this <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> to <see cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>,
            indicates the asset domain the <see cref="T:Awesomium.Core.Data.DataSource"/> provided by this
            <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/>, will be bound to.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Data.ResourceDataSourceProvider.GetDataSource">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Data.ResourceDataSourceProvider.Type">
            <summary>
            Gets or sets the type of application resources that this
            <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> looks for.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.ResourceDataSourceProvider.Assembly">
            <summary>
            Gets or sets the path to the assembly that contains the resources.
            If no assembly is specified, resources are loaded from the current
            executable (default).
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Data.DataPakSourceProvider">
            <summary>
            Represents a <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> that provides
            a <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>
        </member>
        <member name="M:Awesomium.Windows.Data.DataPakSourceProvider.GetDataSource">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Data.DataPakSourceProvider.PakPath">
            <summary>
            Gets or sets the path to the PAK file used to load resources from.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DataPakSourceProvider.Directory">
            <summary>
            Gets or sets a directory to create a PAK file from.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DataPakSourceProvider.UseExistingPakFile">
            <summary>
            Gets or sets if an existing PAK file in the specified
            <see cref="P:Awesomium.Windows.Data.DataPakSourceProvider.Directory"/>, should be used.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DataPakSourceProvider.IgnoreExtensions">
            <summary>
            Gets or sets a comma-separated string representing extensions
            of files that should be ignored in the specified <see cref="P:Awesomium.Windows.Data.DataPakSourceProvider.Directory"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Data.DataSourceDictionary">
            <summary>
            Represents a collection of pairs of asset hosts and <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> instances.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>
        </member>
        <member name="T:Awesomium.Windows.Data.DirectoryDataSourceProvider">
            <summary>
            Represents a <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> that provides
            a <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> instance.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>
        </member>
        <member name="M:Awesomium.Windows.Data.DirectoryDataSourceProvider.GetDataSource">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Directory">
            <summary>
            Gets or sets the directory this data source will load resources from.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.IgnoreExtensions">
            <summary>
            Gets or sets a comma-separated string representing extensions
            of files that should be ignored in the specified <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Directory"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.MaximumSize">
            <summary>
            Gets the maximum size of memory in bytes that this <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instance should use to cache resources in memory. Specify <c>0</c>, to prevent
            caching resources in-memory.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Preload">
            <summary>
            Gets or sets if resources from the directory and its subdirectories, should be pre-loaded to memory.
            </summary>
            <remarks>
            <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Preload"/> will load all the available resources from the
            directory and its subdirectories to memory, ignoring files with the
            specified <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.IgnoreExtensions"/> and until it reaches the specified
            <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.MaximumSize"/>.
            <p/>
            This operation is performed asynchronously and the <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            can still be used while files are being loaded in memory. When pre-loading
            completes, <see cref="E:Awesomium.Core.Data.DirectoryDataSource.PreloadComplete"/> is fired synchronously.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.IsInMemory">
            <summary>
            Gets if this is an in-memory data source provider.
            </summary>
            <remarks>
            In-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> instances, cache the requested
            files in memory either when they are first requested, or by using
            <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Preload"/>. In subsequent requests for the same resource,
            the <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> loads the resource from memory
            instead of reading from disk. This can significantly improve performance.
            <note>
            An in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> will stop caching resources
            to memory when the specified <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.MaximumSize"/> has been reached.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.MaximumSize"/>
        </member>
        <member name="T:Awesomium.Windows.Controls.ImageSurface">
            <summary>
            Represents an <see cref="T:Awesomium.Core.ISurface"/> that renders the pixel buffer of a <see cref="T:Awesomium.Core.IWebView"/>,
            to an <see cref="P:Awesomium.Windows.Controls.ImageSurface.Image"/>. You can then draw this image to a <see cref="T:System.Windows.Controls.Image"/>,
            or assign it to an <see cref="T:System.Windows.Media.ImageBrush"/>.
            </summary>
            <remarks>
            You can create and return an instance of this class, when <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is
            being called. Usually, you can cache and return the same <see cref="T:Awesomium.Windows.Controls.ImageSurface"/> instance
            on multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls. The <see cref="T:Awesomium.Windows.Controls.ImageSurface"/> takes
            care of updating the <see cref="P:Awesomium.Windows.Controls.ImageSurface.Image"/> to reflect the new surface size.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.ImageSurface.OnInitialized(System.Object,Awesomium.Core.SurfaceInitializedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.ImageSurface.Initialized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.ImageSurface.OnUpdated(System.Object,Awesomium.Core.SurfaceUpdatedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.ImageSurface.Updated"/> event.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.ImageSurface.Initialized">
            <summary>
            Occurs when this surface is being initialized for use with a <see cref="T:Awesomium.Core.IWebView"/>.
            </summary>
            <remarks>
            This event can be called more than once if you are reusing this surface
            for multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <note>
            Once assigned to a view and initialized, a surface can only be used
            with that single view.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.ImageSurface.Updated">
            <summary>
            Occurs when the surface has been updated.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.ImageSurface.Image">
            <summary>
            Gets the <see cref="T:System.Windows.Media.ImageSource"/> where the pixel buffer of an <see cref="T:Awesomium.Core.IWebView"/>
            is being rendered.
            </summary>        
        </member>
        <member name="T:Awesomium.Windows.Controls.WPFResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.ActivateIME">
            <summary>
              Looks up a localized string similar to Activate IME.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.AddURLFilter">
            <summary>
              Looks up a localized string similar to Add URL Filter.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.BuildOrReparentWindow">
            <summary>
              Looks up a localized string similar to BuildOrReparentWindow.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.CancelIMEComposition">
            <summary>
              Looks up a localized string similar to Cancel IME Composition.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.ClearAllURLFilters">
            <summary>
              Looks up a localized string similar to Clear all URL filters.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.ConfirmIMEComposition">
            <summary>
              Looks up a localized string similar to Confirm IME Composition.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.CopyHTML">
            <summary>
              Looks up a localized string similar to Copy HTML.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.CopyImage">
            <summary>
              Looks up a localized string similar to Copy Image.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.CopyLinkAddress">
            <summary>
              Looks up a localized string similar to Copy Link Address.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.CreateObject">
            <summary>
              Looks up a localized string similar to Create Object.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.DestroyObject">
            <summary>
              Looks up a localized string similar to Destroy Object.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.HwndHostHWNDField">
            <summary>
              Looks up a localized string similar to _hwnd.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.LoadFile">
            <summary>
              Looks up a localized string similar to Load File.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.LoadURL">
            <summary>
              Looks up a localized string similar to Load URL.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.ResetZoom">
            <summary>
              Looks up a localized string similar to Reset Zoom.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.StopFind">
            <summary>
              Looks up a localized string similar to Stop Find.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.Utilities">
            <summary>
            Utility class providing helper methods that can be used by WPF applications.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetCursor(Awesomium.Core.CursorType)">
            <summary>
            Gets the WPF <see cref="T:System.Windows.Input.Cursor"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.CursorType"/>.
            </summary>
            <param name="cursor">
            The Awesomium cursor type. You can get this by handling the <see cref="E:Awesomium.Windows.Controls.WebControl.CursorChanged"/> event.
            </param>
            <returns>
            A WPF <see cref="T:System.Windows.Input.Cursor"/>, or <see cref="P:System.Windows.Input.Cursors.None"/> if <see cref="F:Awesomium.Core.CursorType.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetModifiers(System.Windows.Input.ModifierKeys)">
            <summary>
            Gets the Awesomium <see cref="T:Awesomium.Core.Modifiers"/> equivalent of WPF <see cref="T:System.Windows.Input.ModifierKeys"/>.
            </summary>
            <returns>
            The Awesomium <see cref="T:Awesomium.Core.Modifiers"/> equivalent of WPF <see cref="T:System.Windows.Input.ModifierKeys"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetCurrentModifiers">
            <summary>
            Gets the modifiers currently pressed.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetKeyboardEvent(System.Windows.Input.KeyEventArgs,Awesomium.Core.WebKeyboardEventType)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a WPF key-down or key-up event.
            </summary>
            <param name="e">
            The WPF key-down or key-up event arguments.
            </param>
            <param name="eventType">
            Indicates if this is a key-down or key-up event.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            WPF key-down or key-up event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetKeyboardEvent(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a WPF key-press (text-input) event.
            </summary>
            <param name="e">
            The WPF key-press (text-input) event arguments. Only the first character of <see cref="P:System.Windows.Input.TextCompositionEventArgs.Text"/>
            or <see cref="P:System.Windows.Input.TextCompositionEventArgs.SystemText"/> is taken into consideration.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            WPF key-press (text-input) event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetInt32Rect(Awesomium.Core.AweRect)">
            <summary>
            Gets an <see cref="T:System.Windows.Int32Rect"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </summary>
            <param name="aweRect">
            An <see cref="T:Awesomium.Core.AweRect"/> value representing an Awesomium rectangle.
            </param>
            <returns>
            A <see cref="T:System.Windows.Int32Rect"/> value equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </returns>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebSessionProvider">
            <summary>
            Represents a WPF <see cref="T:Awesomium.Core.WebSession"/> provider, that you can use as 
            binding source for <see cref="P:Awesomium.Windows.Controls.WebControl.WebSession"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebSessionProvider.BeginQuery">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebSessionProvider.Preferences">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.WebPreferences"/> to use with the created session.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebSessionProvider.DataPath">
            <summary>
            Gets or sets the disk data path of this session, if any.
            </summary>
            <remarks>
            Leave this empty to create an in-memory <see cref="T:Awesomium.Core.WebSession"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources">
            <summary>
            Gets a collection of pairs of asset hosts and <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> instances.
            </summary>
            <remarks>
            The <c>key</c> (or <c>x:Key</c> in XAML) defined when adding
            a <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> to <see cref="T:Awesomium.Windows.Data.DataSourceDictionary"/>,
            indicates the asset domain the <see cref="T:Awesomium.Core.Data.DataSource"/> will be bound to.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlCommands">
            <summary>
            Defines routed commands that are common to a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            In addition to the <see cref="T:Awesomium.Windows.Controls.WebControl"/> specific routed UI commands defined in 
            <see cref="T:Awesomium.Windows.Controls.WebControlCommands"/>, the <see cref="T:Awesomium.Windows.Controls.WebControl"/> reuses many of the
            <see cref="T:System.Windows.Input.ApplicationCommands"/> and <see cref="T:System.Windows.Input.NavigationCommands"/> available with
            the .NET Framework. In order to get the text of these commands displayed in your
            system's locale, you may need to download a <a href="http://www.microsoft.com/download/en/details.aspx?id=23067">
            Microsoft .NET Framework 4 Client Language Pack (x86 x64)</a>.
            <p/>
            <note>
            The text of the commands specified in this class, can be localized by adding more 
            localization resources to the assembly.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.LoadURL">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.Uri)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the URL as a command parameter.
            The URL can be a <see cref="T:System.Uri"/> instance or a string representing the source URL.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CreateObject">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CreateGlobalJavascriptObject(System.String)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the name of the Javascript object to create, as a command parameter.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CopyHTML">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CopyHTML"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CopyLinkAddress">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CopyLinkAddress"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CopyImage">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CopyImageAt(System.Int32,System.Int32)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When executing this command, the <see cref="T:Awesomium.Windows.Controls.WebControl"/> uses the latest right-click coordinates
            as defined in the <see cref="T:Awesomium.Core.WebContextMenuInfo"/> provided by 
            <see cref="P:Awesomium.Windows.Controls.WebControl.LatestContextData"/>,
            to locate the image in the web-page.
            </remarks>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
